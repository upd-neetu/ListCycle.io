# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def hasCycle(self, head: Optional[ListNode]) -> bool:
        if not head or not head.next:
            return False
        
        slow, fast = head, head.next
        while slow != fast:
            if not fast or not fast.next:
                return False
            slow = slow.next
            fast = fast.next.next
        return True

# Here is how you can create a linked list with a cycle for testing:
# Node creation
node1 = ListNode(3)
node2 = ListNode(2)
node3 = ListNode(0)
node4 = ListNode(-4)

# Creating the cycle
node1.next = node2
node2.next = node3
node3.next = node4
node4.next = node2

# Creating Solution object and testing the function
solution = Solution()
print(solution.hasCycle(node1))  # Output: True
